Widget.types.class_detail = {
	initialize: function() {
		var _this = this;
		this.content = jQuery.parseHTML("{{includeTemplate=edit}}");
		// class events and links
		this.event_prototype = jQuery.parseHTML("{{includeTemplate=class_event}}", false, 'table');
		this.link_prototype = jQuery.parseHTML("{{includeTemplate=class_link}}", false, 'table');
		this.event_list = this.content.find('.event_list');
		this.link_list = this.content.find('.link_list');
		this.content.find('.add_entry').hide();
		this.add_event_button = this.content.find('.add_entry.add_event').click(this.edit_event.bind(this));
		this.add_link_button = this.content.find('.add_entry.add_link').click(this.edit_link.bind(this));
		
		this.current_detail_id = null;
		this.uploader = Widget.create('file_upload');

		Widget.create('detail', function(widget) {
			_this.detail_widget = widget.set_instance(_this);
			jQuery.extend(widget.settings, {
				title: "{{writeString=create}}",
				width: 600
			});
			this.accordion = jQuery(widget.content.find('div.accordion')).accordion({active: _this.settings.accordion_active, autoHeight: false, clearStyle: true, collapsible:false});
			if(_this.auto_open) {
				_this.open();
			}
			
			// portrait
			var portrait_area = _this.content.find('.portrait_area');
			portrait_area.find('.remove').click(function() {
				_this.class_portrait_id = null;
			});
			
			_this.uploader.allow_drag_to(portrait_area, null, function(target, file) {
				if(file.type.indexOf('image/') !== 0) {
					Widget.notifyUser('alert', 'Das Portrait muss ein Bild sein (Datei vom Typ «JPG», «PNG»)');
					return false;
				}
				return {document_kind: 'image', document_id: _this.class_portrait_id, document_category_id: _this.settings.class_portrait_category_id, callback: _this.upload_success.bind(_this), error: _this.upload_error.bind(_this), class_document_type: 'portrait'};
			}, true);
			
			//FIXME: When adoption of Firefox 4 is widespread, use Object.defineProperty
			var class_portrait_id = null;
			_this.__defineGetter__('class_portrait_id', function() {
				return class_portrait_id;
			});
			_this.__defineSetter__('class_portrait_id', function(class_portrait) {
				class_portrait_id = class_portrait;
				var remove_link = portrait_area.find('.remove');
				if(class_portrait_id === null) {
					portrait_area.find('.class_portrait').empty();
					remove_link.hide();
				} else {
					remove_link.show();
					Widget.callStatic('document_detail', 'documentPreview', class_portrait_id, 250, function(html) {
						portrait_area.find('.class_portrait').html(html);
					});
				}
			});
			
			// stundenplan		
			var stundenplan = _this.content.find('.stundenplan');
			stundenplan.find('.remove').click(function() {
				_this.class_schedule_id = null;
			});
			
			_this.uploader.allow_drag_to(stundenplan, null, function(target, file) {
				if(file.type !== 'application/pdf' && file.fileName.lastIndexOf('.pdf') !== (file.fileName.length-4)) {
					Widget.notifyUser(Widget.logSeverity.ALERT, 'Der Stundenplan muss eine Datei vom Typ «PDF» sein');
					return false;
				}
				return {document_kind: 'application', document_id: _this.class_schedule_id, document_category_id: _this.settings.class_schedule_category_id, callback: _this.upload_success.bind(_this), error: _this.upload_error.bind(_this), class_document_type: 'schedule'};
			}, true);
			
			var class_schedule_id = null;
			_this.__defineGetter__('class_schedule_id', function() {
				return class_schedule_id;
			});
			_this.__defineSetter__('class_schedule_id', function(class_schedule) {
				class_schedule_id = class_schedule;
				var remove_link = stundenplan.find('.remove');
				if(class_schedule_id === null) {
					stundenplan.find('.class_schedule').empty();
					remove_link.hide();
				} else {
					remove_link.show();
					stundenplan.find('.class_schedule').html('<a class="pdf" href="'+FILE_PREFIX+'/display_document/'+class_schedule_id+'">Stundenplan</a>');
				}
			});
			
			// wochenplan		
			var wochenplan = _this.content.find('.wochenplan');
			wochenplan.find('.remove').click(function() {
				_this.week_schedule_id = null;
			});
			_this.uploader.allow_drag_to(wochenplan, null, function(target, file) {
				if(file.type !== 'application/pdf') {
					Widget.notifyUser(Widget.logSeverity.ALERT, 'Der Wochenplan muss eine Datei vom Typ «PDF» sein');
					return false;
				}
				return {document_kind: 'application', document_id: _this.week_schedule_id, document_category_id: _this.settings.week_plan_category_id, callback: _this.upload_success.bind(_this), error: _this.upload_error.bind(_this), class_document_type: 'week_schedule'};
			}, true);
			
			
			var week_schedule_id = null;
			_this.__defineGetter__('week_schedule_id', function() {
				return week_schedule_id;
			});
			_this.__defineSetter__('week_schedule_id', function(week_schedule) {
				week_schedule_id = week_schedule;
				var remove_link = wochenplan.find('.remove');
				if(week_schedule_id === null) {
					wochenplan.find('.week_schedule').empty();
					remove_link.hide();
				} else {
					remove_link.show();
					wochenplan.find('.week_schedule').html('<a class="pdf" href="'+FILE_PREFIX+'/display_document/'+week_schedule_id+'">Wochenplan</a>');
				}
			});
		});
		
		this.handle('saving', function(event, data) {
			data.class_portrait_id = _this.class_portrait_id;
			data.class_schedule_id = _this.class_schedule_id;
			data.week_schedule_id = _this.week_schedule_id;
		});
	},
	
	upload_success: function(document_id, options) {
		if(options.class_document_type === 'schedule') {
			this.class_schedule_id = document_id;
		} else if(options.class_document_type === 'week_schedule') {
			this.week_schedule_id = document_id;
		} else {
			this.class_portrait_id = document_id;
		}
		this.save(true);
	},
	
	upload_error: function(error) {
	},
	
	open: function() {
		if(!this.detail_widget) {
			this.auto_open = true;
			return false;
		}
		this.detail_widget.open();
	},
	
	fill_data: function() {
		this.schoolClassData(function(class_data) {
			if(class_data.LinkCategoryId === null) {
				class_data.LinkCategoryId = '';
			}
			this.content.find("span.name").text(class_data.Name);
			this.content.find("span.year_period").text(class_data.YearPeriod);
			this.content.find("span.class_teacher").text(class_data.ClassTeacher);
			this.content.find("span.room_number").text(class_data.RoomNumber);
			this.content.find("span.original_id").text(class_data.OriginalId);
			this.content.find("a.page_link").attr('href', class_data.ClassPageUrl);
			this.class_portrait_id = class_data.ClassPortraitId;
			this.class_schedule_id = class_data.ClassScheduleId;
			this.week_schedule_id = class_data.WeekScheduleId;
			this.reload_events(class_data.Id);
			this.reload_links(class_data.Id);
			this.current_detail_id = class_data.Id;
			this.detail_widget.set_title(this.detail_widget.settings.title = class_data.ClassTypeName+' '+class_data.Name);
		});
	},
	
	reload_events: function(class_id) {
		var _this = this;
		this.event_list.empty();	
		var add_event = this.content.find('.add_entry.add_event').show();
		this.listEvents(function(events) {
			jQuery.each(events, function(event_id, data) {
				var event_item = _this.event_prototype.clone();
				event_item.find('.event_date').text(data.Date);
				event_item.find('.event_title').text(data.Title);
				event_item.find('.delete_event').click(function() {
					var delete_message = AdminInterface.strings.get_string('wns.event.delete_warning', { title: data.Title });
					Widget.confirm("{{writeString=wns.delete_warning_title}}", delete_message, function(confirmed) {
						if(confirmed) {
							_this.removeEvent( event_id, function(result) {
								jQuery(event_item).remove();
							});
						}
					});
					return false;
				});				
				event_item.bind('dblclick', function() {
					_this.edit_event(event_id);
				});
				_this.event_list.append(event_item);
			});
		});
	},
	
	edit_event: function(event_id) {
		if(isNaN(event_id)) {
			event_id = null;
		}
		var _this = this;
		if(!event_id) {
			this.add_event_button.addClass('ui-loading-add');
		}
		Widget.create('event_detail', function(widget) {
			widget.settings.predefined_school_class_id = _this.current_detail_id;
		}, function(widget) {
			widget.setEventId(event_id);
			widget.fill_data();
			widget.open();
			widget.save_callback = function(event_id) {
				_this.reload_events();
			};
			_this.add_event_button.removeClass('ui-loading-add');
		});
	},
	
	reload_links: function(class_id) {
		var _this = this;
		this.link_list.empty();	
		this.content.find('.add_entry.add_link').show();
		this.listLinks(function(links) {
			jQuery.each(links, function(link_id, link_data) {
				var link_item = _this.link_prototype.clone();
				link_item.find('.link_title').text(link_data.Name);
				link_item.find('.link_url').text(link_data.Url);
				link_item.find('.delete_link').click(function() {
					var delete_message = AdminInterface.strings.get_string('wns.link.delete_warning', { link_name: link_data.Name});
					Widget.confirm("{{writeString=wns.delete_warning_title}}", delete_message, function(confirmed) {
						if(confirmed) {
							_this.removeLink(link_id, function() {
								link_item.remove();
							});
						}
					});
					return false;
				});
				link_item.bind('dblclick', function() {
					_this.edit_link(link_id);
				});
				_this.link_list.append(link_item);
			});
		});
	},
	
	edit_link: function(link_id) {
		var _this = this;
		if(isNaN(link_id)) {
			link_id = null;
		}		
		if(!link_id) {
			_this.add_link_button.addClass('ui-loading-add');
		}
		Widget.create('link_detail', function(widget) {
			widget.settings.predefined_link_category_id = _this.settings.link_category_id;
		}, function(widget) {
			widget.setLinkId(link_id);
			widget.open();
			widget.fill_data();
			widget.save_callback = function(link_id) {
				_this.addClassLink(link_id);
				_this.reload_links();
			};
			_this.add_link_button.removeClass('ui-loading-add');
		});
	},

	close: function() {
		this.detail_widget.close();
		this.close_callback();
	},
	
	save: function(should_remain_open) {
		if(should_remain_open) {
			this.settings.remains_open = true;
		}
		this.detail_widget.settings.save_callback();
		if(should_remain_open) {
			this.settings.remains_open = false;
		}
	},
	
	settings: {
		accordion_active: 0
	},

	close_callback: jQuery.noop
};